name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Tests inside Docker
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: ${{ secrets.RAILS_ENV }}
      RAILS_MAX_THREADS: ${{ secrets.RAILS_MAX_THREADS }}
      RAILS_PORT: ${{ secrets.RAILS_PORT }}
      MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
      MONGO_PORT: ${{ secrets.MONGO_PORT }}
      COGNITO_USER_POOL_CLIENT_ID: ${{ secrets.COGNITO_USER_POOL_CLIENT_ID }}
      COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
      COGNITO_PASSWORD: ${{ secrets.COGNITO_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
      AWS_SES_ACCESS_KEY_ID: ${{ secrets.AWS_SES_ACCESS_KEY_ID }}
      AWS_SES_SECRET_ACCESS_KEY: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
      AWS_SES_REGION: ${{ secrets.AWS_SES_REGION }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate .env from .env.example using envsubst
        run: envsubst < .env.example > .env

      - name: Ensure .env exists
        run: ls -la .env && cat .env

      - name: Set up Docker services
        run: |
          docker compose up -d api
          sleep 10

      - name: Run RSpec
        run: docker compose up --abort-on-container-exit --exit-code-from test-runner test-runner

  sonar:
    name: Run SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate .env with SONAR_TOKEN only
        run: echo "SONAR_TOKEN=${SONAR_TOKEN}" > .env

      - name: Run SonarScanner
        run: ./sonar-scanner.sh

  send-deploy-notification:
    name: Send Notification to internal K8S
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Post commit data
        run: |
          curl -X POST https://ci-hackathon.gazetapress.com/ \
          -H 'Content-Type: application/json' \
          -d '${{ toJson(github.event) }}'
